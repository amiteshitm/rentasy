{"version":3,"sources":["serviceWorker.js","router-outlet.js","App.js","reducer/user.js","reducer/todo.js","reducer/getProfileDetailReducer.js","reducer/root-reducer.js","store.js","index.js"],"names":["Boolean","window","location","hostname","match","Pages","React","lazy","SuccessfullMsg","SuccessfullMsg1","RouterOutlet","props","fallback","style","textAlign","marginTop","type","color","height","width","timeout","path","render","App","initialState","isLoggedIn","list","loading","data","getProfileReducer","state","action","payload","combineReducers","user","todo","store","createStore","RootReducer","applyMiddleware","ReduxThunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCdAC,EAAQC,IAAMC,MAAK,kBAAM,kCACzBC,EAAiBF,IAAMC,MAAK,kBAAM,kCAClCE,EAAkBH,IAAMC,MAAK,kBAAM,kCA8B1BG,MA5Bf,SAAsBC,GACpB,OACE,kBAAC,WAAD,CACEC,SACE,yBAAKC,MAAO,CAAEC,UAAW,SAAUC,UAAW,MAC5C,kBAAC,IAAD,CACEC,KAAK,OACLC,MAAM,UACNC,OAAQ,IACRC,MAAO,IACPC,QAAS,SAKf,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAQ,SAACX,GAAD,OAAW,kBAACN,EAAUM,MAC9C,kBAAC,IAAD,CACEU,KAAK,eACLC,OAAQ,SAACX,GAAD,OAAW,kBAACH,EAAmBG,MAEzC,kBAAC,IAAD,CACEU,KAAK,gBACLC,OAAQ,SAACX,GAAD,OAAW,kBAACF,EAAoBE,Q,MCfjCY,MARf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,Q,sBCVAC,EAAe,CAGnBC,YAAY,G,QCHRD,EAAe,CACjBE,KAAM,ICDJF,EAAe,CACnBG,SAAS,EACTC,KAAM,IAeOC,EAZW,WAAmC,IAAlCC,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC1D,OAAQA,EAAOf,MACb,IAAK,YACH,OAAO,2BACFc,GADL,IAEEH,SAAS,EACTC,KAAMG,EAAOC,UAEjB,QACE,OAAOF,ICTEG,cAAgB,CAC7BC,KHAa,WAAmC,IAAlCJ,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC/C,OAAQA,EAAOf,MAKb,IAAK,YACH,OAAO,2BACFc,GADL,IAEEL,YAAY,IAEhB,IAAK,aACH,OAAO,2BACFK,GADL,IAEEL,YAAY,IAEhB,QACE,OAAOK,IGhBXK,KFHa,WAAmC,IAAlCL,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC7C,OAAQA,EAAOf,MACX,IAAK,YACD,OAAO,eAAKc,GAChB,IAAK,WACD,OAAO,2BAAKA,GAAZ,IAAmBJ,KAAK,GAAD,mBAAMI,EAAMJ,MAAS,CAACK,EAAOC,YACxD,QACI,OAAOF,IEHjBD,sBCIaO,EAPDC,YACVC,EACAC,YAAgBC,M,MCGpBC,IAASnB,OACP,kBAAC,IAAMoB,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,EAAD,QAGJO,SAASC,eAAe,SR8GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ab028e8a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { Suspense } from \"react\";\r\nimport { Route } from \"react-router-dom\";\r\nimport Loader from 'react-loader-spinner'\r\n\r\nconst Pages = React.lazy(() => import(\"./pages/\"));\r\nconst SuccessfullMsg = React.lazy(() => import(\"./pages/success-msg\"));\r\nconst SuccessfullMsg1 = React.lazy(() => import(\"./pages/success-msg1\"));\r\n\r\nfunction RouterOutlet(props) {\r\n  return (\r\n    <Suspense\r\n      fallback={\r\n        <div style={{ textAlign: \"center\", marginTop: 100 }}>\r\n          <Loader\r\n            type=\"Bars\"\r\n            color=\"#00BFFF\"\r\n            height={100}\r\n            width={100}\r\n            timeout={15000} //3 secs\r\n          />\r\n        </div>\r\n      }\r\n    >\r\n      <Route path=\"/\" render={(props) => <Pages {...props} />} />\r\n      <Route\r\n        path=\"/success-msg\"\r\n        render={(props) => <SuccessfullMsg {...props} />}\r\n      />\r\n      <Route\r\n        path=\"/success-msg1\"\r\n        render={(props) => <SuccessfullMsg1 {...props} />}\r\n      />\r\n    </Suspense>\r\n  );\r\n}\r\n\r\nexport default RouterOutlet;\r\n","import React from 'react';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nimport RouterOutlet  from './router-outlet';\r\n\r\nimport './App.scss';\r\n\r\nfunction App() {\r\n  return (\r\n    <BrowserRouter>\r\n      <RouterOutlet />\r\n    </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const initialState = {\r\n//   email: \"\",\r\n//   password: \"\",\r\n  isLoggedIn: false,\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n  switch (action.type) {\r\n    // case \"SET_EMAIL_PASSWORD\":\r\n    //   state.email = action.payload.email;\r\n    //   state.password = action.payload.password;\r\n    //   return state;\r\n    case 'LOGGED_IN':\r\n      return {\r\n        ...state,\r\n        isLoggedIn: true,\r\n      };\r\n    case 'LOGGED_OUT':\r\n      return {\r\n        ...state,\r\n        isLoggedIn: false,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","const initialState = {\r\n    list: []\r\n};\r\n  \r\nexport default (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case 'TODO_DATA':\r\n            return { ...state};\r\n        case 'ADD_TODO':\r\n            return { ...state, list: [...state.list, ...[action.payload ]] };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n  ","const initialState = {\r\n  loading: false,\r\n  data: [],\r\n};\r\n\r\nconst getProfileReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"USER_LIST\":\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n        data: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default getProfileReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport user from \"./user\";\r\nimport todo from \"./todo\";\r\nimport getProfileReducer from \"./getProfileDetailReducer\";\r\n\r\nexport default combineReducers({\r\n  user,\r\n  todo,\r\n  getProfileReducer,\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nimport RootReducer from './reducer/root-reducer';\r\n\r\nconst store = createStore(\r\n    RootReducer,\r\n    applyMiddleware(ReduxThunk),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n);\r\n\r\n\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,  \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}